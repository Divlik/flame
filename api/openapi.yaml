openapi: 3.0.0
info:
  license:
    name: MIT
  title: Fledge REST API
  version: 1.0.0
servers:
  - url: /
paths:
  /{user}/designs:
    #------------------------------------#
    # Get Template - get list of all designs
    #------------------------------------#
    get:
      operationId: getDesigns
      summary: Get list of all the designs created by the user.
      tags:
        - designs
      parameters:
        - name: user
          description: user id
          explode: false
          in: path
          required: true
          schema:
            type: string
          style: simple
        - description: How many items to return at one time (max 100)
          explode: true
          in: query
          name: limit
          required: false
          schema:
            format: int32
            type: integer
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DesignInfo'
          description: A paged array of designs
          headers:
            x-next:
              description: A link to the next page of responses
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error


  /{user}/design:
    #------------------------------------#
    # Create New Design Template
    #------------------------------------#
    post:
      operationId: createDesign
      summary: Create a new design template.
      tags:
        - design
      parameters:
        - description: user name
          explode: false
          in: path
          name: user
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        description: Collection of node information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DesignInfo'
      responses:
        "201":
          description: Null response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error

  /{user}/design/{designId}:
    #------------------------------------#
    # Get Design via ID
    #------------------------------------#
    get:
      operationId: getDesign
      summary: Get design template information
      tags:
        - design
      parameters:
        - name: user
          description: user id
          explode: false
          in: path
          required: true
          schema:
            type: string
          style: simple
        - name: designId
          description: design id
          explode: false
          in: path
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Design'

          description: A paged array of designs
          headers:
            x-next:
              description: A link to the next page of responses
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error

  /{user}/design/{designId}/schema:
    #------------------------------------#
    # Get Design Schema - all or by id
    #------------------------------------#
    get:
      operationId: getDesignSchema
      tags:
        - designSchema
      parameters:
        - name: user
          description: user id
          in: path
          schema:
            type: string
          style: simple
          explode: false
          required: true
        - name: designId
          description: design id
          in: path
          schema:
            type: string
          style: simple
          explode: false
          required: true
        - name: getType
          description: Type of fetch based on id or all
          in: query
          schema:
            type: string
            enum: ["all", "id"]
          style: form
          explode: false
          required: false
        - name: schemaId
          description: If type is ID this provides the design schema id
          in: query
          schema:
            type: string
          style: form
          explode: true
          required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DesignSchema'
                  - $ref: '#/components/schemas/DesignSchemas'
          description: a design schema
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a design schema owned by user

    #------------------------------------#
    # Create Design Schema
    #------------------------------------#
    post:
      operationId: updateDesignSchema
      parameters:
        - name: user
          description: user id
          in: path
          schema:
            type: string
          style: simple
          explode: false
          required: true
        - name: designId
          description: design id
          in: path
          schema:
            type: string
          style: simple
          explode: false
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DesignSchema'
      responses:
        "201":
          description: Null response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Update a design schema
      tags:
        - designSchema

  /{user}/design/{designId}/code:
    #------------------------------------#
    # Get Code Zip
    #------------------------------------#
    get:
      operationId: getDesignCode
      parameters:
        - name: user
          description: user name
          explode: false
          in: path
          required: true
          schema:
            type: string
          style: simple
        - name: designId
          description: design id
          explode: false
          in: path
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                # a binary file of any type
                type: string
                format: binary
          description: A design code file in zipped format
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get a zipped design code file owned by user
      tags:
        - designCode

    #------------------------------------#
    # Upload Code Zip
    #------------------------------------#
    post:
      operationId: updateDesignCode
      parameters:
        - name: user
          description: user id
          explode: false
          in: path
          required: true
          schema:
            type: string
          style: simple
        - name: designId
          description: design id
          explode: false
          in: path
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "201":
          description: Null response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Update a design doce
      tags:
        - designCode

components:
  schemas:
    #-----------------------#
    # Basic Design Information
    #-----------------------#
    DesignInfo:
      description: Only basic desgin information.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          format: int64
          type: integer
        userId:
          type: string
      required:
        - id
        - name
      example:
        name: diabete predict
        description : Helps in quick diagnosis and prediction of diabetes among patients.
        id: 1

    Design:
      description: Design template details along with all the schemas.
      type: object
      allOf:
        - $ref: '#/components/schemas/DesignInfo'
        - $ref: '#/components/schemas/DesignSchemas'

    #-----------------------#
    # Schema
    #-----------------------#
    DesignSchemas:
      description: A collection of design schemas related to design template
      type: object
      properties:
        schemas:
          type: array
          items:
            $ref : '#/components/schemas/DesignSchema'
      required:
        - schemas

    DesignSchema:
      description: Schema to define the roles and their connections
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        channels:
          type: array
          items:
            $ref: '#/components/schemas/Channel'
        connectors:
          type: array
          items:
            $ref: '#/components/schemas/Connector'
      required:
        - id
        - name
        - roles
        - channels
      example:
        - name: sample schema 1
          description: Sample schema to demostrate a TAG layout.
          roles:
            - name: trainer
              description: These are responsible to consume the data and train local model
              isDataConsumer: true
            - name: aggregator
              description: These are responsible to aggregate the updates from trainer nodes.
              replica: 2
            - name: global_aggregator
              description: It is responsible to aggregate the updates from all the aggregators and make a generic model.
              replica: 2
          channel:
            - name: trainer-agg-channel
              description: Model update is sent from trainer to aggregator and vice-versa.
              pair: ["trainer", "aggregator"]
              groupBy:
                type: tag
                value : ["us", "eu"]
            - name: agg-global-channel
              description: Model update is sent from all aggregators to the global aggregator and vice-versa.
              pair: ["trainer", "aggregator"]
              groupBy:
                type: tag
                value : ["us", "eu"]


    #-----------------------#
    # Roles
    #-----------------------#
    Role:
      description: Define the role of a compute unit
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        isDataConsumer:
          type: boolean
        replica:
          format: int32
          type: integer
      required:
        - name
      example:
        - name: trainer
          description: These are responsible to consume the data and train local model
          isDataConsumer: true
        - name: aggregator
          description: These are responsible to aggregate the updates from trainer nodes.
          replica: 2

    #-----------------------#
    # Channel between roles
    #-----------------------#
    Channel:
      description: Defines how different roles are connected.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        pair:
          type: array
          items:
            type: string
          minItems: 2
          maxItems: 2
        groupBy:
          type: object
          properties:
            type:
              type: string
            value:
              type: array
              items:
                type: string
              # code generation for oneOf is not working
              # https://github.com/OpenAPITools/openapi-generator/issues/8086
              # oneOf:
              #   - type: string
              #   - type: integer
              #   - type: array
              #     items:
              #       oneOf:
              #         - type: string
              #         - type: integer
          required:
            - type
            - value
        isBidirectional:
          type: boolean
      required:
        - name
        - pair
        - groupby
      example:
        - name: directionalExample
          description: An example to demostrate bi-directional channel creation. Data is sent from trainer to aggregator and vice-versa.
          pair: ["trainer", "aggregator"]
          groupBy:
            type: tag
            value : ["us", "eu"]

        - name: non-directionalExample
          description: An example to demostrate connection in one direction. Data is sent from aggregator to global aggregator but not the other way. isBidirectional flag allows you to define one way channels.
          pair: ["aggregator", "global-aggregator"]
          groupBy:
            type: tag
            value : ["us", "eu"]
          isBidirectional: false

    #-----------------------#
    # Connectors for channels
    #-----------------------#
    Connector:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        connection:
          type: object
      required:
        - name
        - pair
        - connection

    #-----------------------#
    # Helpers
    #-----------------------#
    Error:
      description: Generic error object.
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
        - code
        - message

