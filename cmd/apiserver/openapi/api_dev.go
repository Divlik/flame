/*
 * Job REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
	"wwwin-github.cisco.com/eti/fledge/pkg/objects"
)

// A DevApiController binds http requests to an api service and writes the service results to the http response
type DevApiController struct {
	service DevApiServicer
}

// NewDevApiController creates a default api controller
func NewDevApiController(s DevApiServicer) Router {
	return &DevApiController{service: s}
}

// Routes returns all of the api route for the DevApiController
func (c *DevApiController) Routes() Routes {
	return Routes{
		{
			"JobNodes",
			strings.ToUpper("Post"),
			"/{user}/nodes/",
			c.JobNodes,
		},
		{
			"UpdateJobNodes",
			strings.ToUpper("Put"),
			"/{user}/nodes/",
			c.UpdateJobNodes,
		},
	}
}

// JobNodes - Nodes information for the job
func (c *DevApiController) JobNodes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobNodes := &objects.JobNodes{}
	if err := json.NewDecoder(r.Body).Decode(&jobNodes); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.JobNodes(r.Context(), user, *jobNodes)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateJobNodes - Update or add new nodes information for the job
func (c *DevApiController) UpdateJobNodes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobNodes := &objects.JobNodes{}
	if err := json.NewDecoder(r.Body).Decode(&jobNodes); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UpdateJobNodes(r.Context(), user, *jobNodes)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
