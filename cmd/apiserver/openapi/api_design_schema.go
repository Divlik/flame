/*
 * Fledge REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DesignSchemaApiController binds http requests to an api service and writes the service results to the http response
type DesignSchemaApiController struct {
	service DesignSchemaApiServicer
}

// NewDesignSchemaApiController creates a default api controller
func NewDesignSchemaApiController(s DesignSchemaApiServicer) Router {
	return &DesignSchemaApiController{service: s}
}

// Routes returns all of the api route for the DesignSchemaApiController
func (c *DesignSchemaApiController) Routes() Routes {
	return Routes{ 
		{
			"GetDesignSchema",
			strings.ToUpper("Get"),
			"/designs/{user}/{design}/schema",
			c.GetDesignSchema,
		},
		{
			"UpdateDesignSchema",
			strings.ToUpper("Put"),
			"/designs/{user}/{design}/schema",
			c.UpdateDesignSchema,
		},
	}
}

// GetDesignSchema - Get a design schema owned by user
func (c *DesignSchemaApiController) GetDesignSchema(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]
	
	design := params["design"]
	
	result, err := c.service.GetDesignSchema(r.Context(), user, design)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateDesignSchema - Update a design schema
func (c *DesignSchemaApiController) UpdateDesignSchema(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]
	
	design := params["design"]
	
	designSchema := &DesignSchema{}
	if err := json.NewDecoder(r.Body).Decode(&designSchema); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UpdateDesignSchema(r.Context(), user, design, *designSchema)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
