/*
 * Job REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"

	"go.uber.org/zap"
	"wwwin-github.cisco.com/eti/fledge/pkg/objects"
	"wwwin-github.cisco.com/eti/fledge/pkg/util"
)

// AgentApiService is a service that implents the logic for the AgentApiServicer
// This service should implement the business logic for every endpoint for the AgentApi API.
// Include any external packages or services that will be required by this service.
type AgentApiService struct {
}

// NewAgentApiService creates a default api service
func NewAgentApiService() AgentApiServicer {
	return &AgentApiService{}
}

// UpdateAgentStatus - Update agent status for job id.
func (s *AgentApiService) UpdateAgentStatus(ctx context.Context, user string, jobId string, agentId string,
	agentStatus objects.AgentStatus) (objects.ImplResponse, error) {
	//TODO input validation
	zap.S().Debugf("Update agent status agentId: %s | jobId: %s | update type: %s", agentId, jobId, agentStatus.UpdateType)

	//create controller request
	uriMap := map[string]string{
		"user":    user,
		"jobId":   jobId,
		"agentId": agentId,
	}
	url := CreateURI(util.UpdateAgentStatusEndPoint, uriMap)

	//send get request
	_, _, err := util.HTTPPut(url, agentStatus, "application/json")

	//response to the user
	if err != nil {
		return objects.Response(http.StatusInternalServerError, err), errors.New("error while updating the agent status to controller/database")
	}
	return objects.Response(http.StatusOK, nil), nil
}
