/*
 * Fledge REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"errors"
	"net/http"

	"go.uber.org/zap"
	"wwwin-github.cisco.com/fledge/fledge/cmd/controller"
	objects2 "wwwin-github.cisco.com/fledge/fledge/pkg/objects"
)

// DesignSchemaApiService is a service that implents the logic for the DesignSchemaApiServicer
// This service should implement the business logic for every endpoint for the DesignSchemaApi API.
// Include any external packages or services that will be required by this service.
type DesignSchemaApiService struct {
}

// NewDesignSchemaApiService creates a default api service
func NewDesignSchemaApiService() DesignSchemaApiServicer {
	return &DesignSchemaApiService{}
}

// GetDesignSchema - Get a design schema owned by user
func (s *DesignSchemaApiService) GetDesignSchema(ctx context.Context, user string, designId string, getType string, schemaId string) (ImplResponse, error) {
	zap.S().Debugf("get design schema details for user:%s | designId:%s | type:%s | schemaId:%s", user, designId, getType, schemaId)

	info, err := controller.GetDesignSchema(user, designId, getType, schemaId)

	if err != nil {
		return Response(http.StatusInternalServerError, nil), errors.New("get design schema details request failed")
	} else {
		return Response(http.StatusOK, info), nil
	}
}

// UpdateDesignSchema - Update a design schema
func (s *DesignSchemaApiService) UpdateDesignSchema(ctx context.Context, user string, designId string, designSchema objects2.DesignSchema) (ImplResponse, error) {
	zap.S().Debugf("update design schema request recieved ... | designId : %v ", designId)
	err := controller.UpdateDesignSchema(user, designId, designSchema)

	if err != nil {
		return Response(http.StatusInternalServerError, nil), errors.New("create new design request failed")
	} else {
		return Response(http.StatusCreated, nil), nil
	}
}
