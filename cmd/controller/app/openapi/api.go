/*
 * Fledge REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"os"

	"wwwin-github.cisco.com/eti/fledge/pkg/objects"
)

// DesignApiRouter defines the required methods for binding the api requests to a responses for the DesignApi
// The DesignApiRouter implementation should parse necessary information from the http request,
// pass the data to a DesignApiServicer to perform the required actions, then write the service results to the http response.
type DesignApiRouter interface {
	CreateDesign(http.ResponseWriter, *http.Request)
	GetDesign(http.ResponseWriter, *http.Request)
}

// DesignCodeApiRouter defines the required methods for binding the api requests to a responses for the DesignCodeApi
// The DesignCodeApiRouter implementation should parse necessary information from the http request,
// pass the data to a DesignCodeApiServicer to perform the required actions, then write the service results to the http response.
type DesignCodeApiRouter interface {
	GetDesignCode(http.ResponseWriter, *http.Request)
	UpdateDesignCode(http.ResponseWriter, *http.Request)
}

// DesignSchemaApiRouter defines the required methods for binding the api requests to a responses for the DesignSchemaApi
// The DesignSchemaApiRouter implementation should parse necessary information from the http request,
// pass the data to a DesignSchemaApiServicer to perform the required actions, then write the service results to the http response.
type DesignSchemaApiRouter interface {
	GetDesignSchema(http.ResponseWriter, *http.Request)
	UpdateDesignSchema(http.ResponseWriter, *http.Request)
}

// DesignsApiRouter defines the required methods for binding the api requests to a responses for the DesignsApi
// The DesignsApiRouter implementation should parse necessary information from the http request,
// pass the data to a DesignsApiServicer to perform the required actions, then write the service results to the http response.
type DesignsApiRouter interface {
	GetDesigns(http.ResponseWriter, *http.Request)
}

// DesignApiServicer defines the api actions for the DesignApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DesignApiServicer interface {
	CreateDesign(context.Context, string, objects.DesignInfo) (objects.ImplResponse, error)
	GetDesign(context.Context, string, string) (objects.ImplResponse, error)
}

// DesignCodeApiServicer defines the api actions for the DesignCodeApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DesignCodeApiServicer interface {
	GetDesignCode(context.Context, string, string) (objects.ImplResponse, error)
	UpdateDesignCode(context.Context, string, string, *os.File) (objects.ImplResponse, error)
}

// DesignSchemaApiServicer defines the api actions for the DesignSchemaApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DesignSchemaApiServicer interface {
	GetDesignSchema(context.Context, string, string, string, string) (objects.ImplResponse, error)
	UpdateDesignSchema(context.Context, string, string, objects.DesignSchema) (objects.ImplResponse, error)
}

// DesignsApiServicer defines the api actions for the DesignsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DesignsApiServicer interface {
	GetDesigns(context.Context, string, int32) (objects.ImplResponse, error)
}

// JobApiRouter defines the required methods for binding the api requests to a responses for the JobApi
// The JobApiRouter implementation should parse necessary information from the http request,
// pass the data to a JobApiServicer to perform the required actions, then write the service results to the http response.
type JobApiRouter interface {
	ChangeJobSchema(http.ResponseWriter, *http.Request)
	DeleteJob(http.ResponseWriter, *http.Request)
	GetJob(http.ResponseWriter, *http.Request)
	SubmitJob(http.ResponseWriter, *http.Request)
	UpdateJob(http.ResponseWriter, *http.Request)
}

// JobsApiRouter defines the required methods for binding the api requests to a responses for the JobsApi
// The JobsApiRouter implementation should parse necessary information from the http request,
// pass the data to a JobsApiServicer to perform the required actions, then write the service results to the http response.
type JobsApiRouter interface {
	GetJobs(http.ResponseWriter, *http.Request)
}

// JobApiServicer defines the api actions for the JobApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type JobApiServicer interface {
	ChangeJobSchema(context.Context, string, string, string, string) (objects.ImplResponse, error)
	DeleteJob(context.Context, string, string) (objects.ImplResponse, error)
	GetJob(context.Context, string, string) (objects.ImplResponse, error)
	SubmitJob(context.Context, string, objects.JobInfo) (objects.ImplResponse, error)
	UpdateJob(context.Context, string, string, objects.JobInfo) (objects.ImplResponse, error)
}

// JobsApiServicer defines the api actions for the JobsApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type JobsApiServicer interface {
	GetJobs(context.Context, string, string, string, int32) (objects.ImplResponse, error)
}

// AgentApiRouter defines the required methods for binding the api requests to a responses for the AgentApi
// The AgentApiRouter implementation should parse necessary information from the http request,
// pass the data to a AgentApiServicer to perform the required actions, then write the service results to the http response.
type AgentApiRouter interface {
	UpdateAgentStatus(http.ResponseWriter, *http.Request)
}

// AgentApiServicer defines the api actions for the AgentApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AgentApiServicer interface {
	UpdateAgentStatus(context.Context, string, string, string, objects.AgentStatus) (objects.ImplResponse, error)
}

// DevApiRouter defines the required methods for binding the api requests to a responses for the DevApi
// The DevApiRouter implementation should parse necessary information from the http request,
// pass the data to a DevApiServicer to perform the required actions, then write the service results to the http response.
//TODO remove me after prototyping phase is done.
type DevApiRouter interface {
	JobNodes(http.ResponseWriter, *http.Request)
	UpdateJobNodes(http.ResponseWriter, *http.Request)
}

// DevApiServicer defines the api actions for the DevApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
//TODO remove me after prototyping phase is done.
type DevApiServicer interface {
	JobNodes(context.Context, string, objects.JobNodes) (objects.ImplResponse, error)
	UpdateJobNodes(context.Context, string, objects.JobNodes) (objects.ImplResponse, error)
}
