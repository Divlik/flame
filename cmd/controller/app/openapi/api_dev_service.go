/*
 * Job REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"

	"go.uber.org/zap"

	"wwwin-github.cisco.com/eti/fledge/pkg/objects"
)

// DevApiService is a service that implents the logic for the DevApiServicer
// This service should implement the business logic for every endpoint for the DevApi API.
// Include any external packages or services that will be required by this service.
type DevApiService struct {
}

// NewDevApiService creates a default api service
func NewDevApiService() DevApiServicer {
	return &DevApiService{}
}

var JobNodesInMem = make(map[string]objects.JobNodes)

// JobNodes - Nodes information for the job
func (s *DevApiService) JobNodes(ctx context.Context, user string, jobNodes objects.JobNodes) (objects.ImplResponse, error) {
	zap.S().Infof("Adding nodes for designId : %s", jobNodes.DesignId)
	zap.S().Debugf("Node info: %v", jobNodes.Nodes)
	JobNodesInMem[jobNodes.DesignId] = jobNodes
	return objects.Response(http.StatusCreated, nil), nil
}

// UpdateJobNodes - Update or add new nodes information for the job
func (s *DevApiService) UpdateJobNodes(ctx context.Context, user string, jobNodes objects.JobNodes) (objects.ImplResponse, error) {
	dId := jobNodes.DesignId
	zap.S().Infof("Updating nodes for designId : %s", jobNodes.DesignId)
	zap.S().Infof("Current node information: %v", JobNodesInMem[jobNodes.DesignId])
	zap.S().Debugf("New Node info: %v", jobNodes.Nodes)

	eNodes := JobNodesInMem[dId].Nodes
	//mark existing node flag as true
	for j := range eNodes {
		eNodes[j].IsExistingNode = true
	}

	//loop through all the nodes shared via conf file
	for _, node := range jobNodes.Nodes {
		if node.IsExistingNode {
			//if existing node is required to be updated
			for j, existingNode := range eNodes {
				if existingNode.Uuid == node.Uuid {
					zap.S().Infof("Found an existing node that needs to be updated. old: %v | new: %v", existingNode, node)
					eNodes[j].Command = node.Command
					eNodes[j].IsUpdated = node.IsUpdated
				}
			}
		} else {
			//adding a new node
			eNodes = append(eNodes, node)
		}
	}

	JobNodesInMem[dId] = objects.JobNodes{
		DesignId: dId,
		Nodes:    eNodes,
	}

	zap.S().Infof("Updated node information: %v", JobNodesInMem[dId])
	return objects.Response(http.StatusCreated, nil), nil
}
