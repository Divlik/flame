/*
 * Job REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"

	"go.uber.org/zap"

	"wwwin-github.cisco.com/eti/fledge/cmd/controller/database"
	grpcctlr "wwwin-github.cisco.com/eti/fledge/cmd/controller/grpc"
	"wwwin-github.cisco.com/eti/fledge/pkg/objects"
	pbNotification "wwwin-github.cisco.com/eti/fledge/pkg/proto/go/notification"
	"wwwin-github.cisco.com/eti/fledge/pkg/util"
)

// JobApiService is a service that implents the logic for the JobApiServicer
// This service should implement the business logic for every endpoint for the JobApi API.
// Include any external packages or services that will be required by this service.
type JobApiService struct {
}

// NewJobApiService creates a default api service
func NewJobApiService() JobApiServicer {
	return &JobApiService{}
}

// DeleteJob - Delete job by id.
func (s *JobApiService) DeleteJob(ctx context.Context, user string, jobId string) (ImplResponse, error) {
	// TODO - update DeleteJob with the required logic for this service method.
	// Add api_job_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	//TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	//return Response(401, nil),nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteJob method not implemented")
}

// GetJob - Get job detail.
func (s *JobApiService) GetJob(ctx context.Context, user string, jobId string) (ImplResponse, error) {
	jInfo, err := database.GetJob(user, jobId)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), errors.New("get job details request failed")
	}
	return Response(http.StatusOK, jInfo), nil
}

// SubmitJob - Submit a new job.
func (s *JobApiService) SubmitJob(ctx context.Context, user string, jobInfo objects.JobInfo) (ImplResponse, error) {
	//insert in database. If failed, abort
	jId, err := database.SubmitJob(user, jobInfo)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), errors.New("submit new job request failed")
	}

	//Notify the agents about new job
	//Step 1 - get nodes for the job
	var agentInfo = getNodes(jobInfo.DesignId)

	//Step 2 - add nodes details into database
	inJson, err := json.Marshal(agentInfo)
	if err != nil {
		zap.S().Errorf("error while marshling agent info %v", err)
		return Response(http.StatusMultiStatus, nil), errors.New("job request created but failed to initialized")
	}
	err = database.UpdateJobDetails(jId, util.AddJobNodes, inJson)
	if err != nil {
		return Response(http.StatusMultiStatus, nil), errors.New("job request created but failed to initialized")
	}

	//Step 3 - Notifying the agents of new job. Sending a init request allows to re-use the agent nodes in the future, if needed.
	jobInfo.ID = jId
	jobMsg := objects.JobNotification{
		Agents:           agentInfo,
		Job:              jobInfo,
		NotificationType: util.Init,
	}
	zap.S().Debugf("Sending notification to all the agents (count: %d) for new job id: %s", len(agentInfo), jId)
	resp, err := grpcctlr.ControllerGRPC.SendNotification(grpcctlr.JobNotification, jobMsg)
	if err != nil {
		zap.S().Errorf("failed to notify the agents. %v", err)
		return Response(http.StatusCreated, jId), err
	}

	//Check for partial error
	if resp.GetStatus() == pbNotification.Response_SUCCESS_WITH_ERROR {
		zap.S().Errorf("error while sending out new job notification for jobId: %s. Only partial clients notified.", jId)
		msResponse := map[string]interface{}{
			util.ID:     jId,
			util.Errors: resp.GetDetails(),
		}
		return Response(http.StatusMultiStatus, msResponse), nil
	}
	return Response(http.StatusCreated, jId), nil
}

//TODO Code related to calling cluster manager to get nodes to be added here. For development purpose we are assuming that information is present in-memory
func getNodes(designId string) []objects.ServerInfo {
	zap.S().Debugf("Getting nodes for designId: %s", designId)
	var agentInfo []objects.ServerInfo
	for _, node := range JobNodesInMem[designId].Nodes {
		node.Status = util.Initializing
		agentInfo = append(agentInfo, node)
	}

	return agentInfo

	//get the list of agent nodes where the job is required to be deployed
	//var agentInfo []objects.ServerInfo
	//agentInfo = append(agentInfo, objects.ServerInfo{
	//	IP:     "localhost",
	//	Port:   5000,
	//	Uuid:   "trainer_uuid_1",
	//	Role:   "trainer",
	//	Status: util.Initializing,
	//})
	//agentInfo = append(agentInfo, objects.ServerInfo{
	//	IP:     "localhost",
	//	Port:   5001,
	//	Uuid:   "trainer_uuid_2",
	//	Role:   "trainer",
	//	Status: util.Initializing,
	//})
	//agentInfo = append(agentInfo, objects.ServerInfo{
	//	IP:     "localhost",
	//	Port:   6000,
	//	Uuid:   "aggregator_uuid_1",
	//	Role:   "aggregator",
	//	Status: util.Initializing,
	//})
	//return agentInfo
}

// UpdateJob - Update job by id.
func (s *JobApiService) UpdateJob(ctx context.Context, user string, jobId string, jobInfo objects.JobInfo) (ImplResponse, error) {
	// TODO - update UpdateJobEndPoint with the required logic for this service method.
	// Add api_job_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	//return Response(200, nil),nil

	//TODO: Uncomment the next line to return response Response(0, Error{}) or use other options such as http.Ok ...
	//return Response(0, Error{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateJobEndPoint method not implemented")
}
