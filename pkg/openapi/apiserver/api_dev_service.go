// Copyright (c) 2021 Cisco Systems, Inc. and its affiliates
// All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Job REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"context"
	"errors"
	"net/http"

	"go.uber.org/zap"

	"wwwin-github.cisco.com/eti/fledge/pkg/openapi"
	"wwwin-github.cisco.com/eti/fledge/pkg/restapi"
)

// DevApiService is a service that implents the logic for the DevApiServicer
// This service should implement the business logic for every endpoint for the DevApi API.
// Include any external packages or services that will be required by this service.
type DevApiService struct {
}

// NewDevApiService creates a default api service
func NewDevApiService() openapi.DevApiServicer {
	return &DevApiService{}
}

// JobNodes - Nodes information for the job
func (s *DevApiService) JobNodes(ctx context.Context, user string, jobNodes openapi.JobNodes) (openapi.ImplResponse, error) {
	zap.S().Debugf("Add nodes for user: %s | designId: %v", user, jobNodes.DesignId)

	//create controller request
	uriMap := map[string]string{
		"user": user,
	}
	url := restapi.CreateURL(HostEndpoint, restapi.JobNodesEndPoint, uriMap)

	//send get request
	_, _, err := restapi.HTTPPost(url, jobNodes, "application/json")

	//response to the user
	if err != nil {
		return openapi.Response(http.StatusInternalServerError, nil), errors.New("add nodes for job request failed")
	}
	return openapi.Response(http.StatusOK, nil), err
}

// UpdateJobNodes - Update or add new nodes information for the job
func (s *DevApiService) UpdateJobNodes(ctx context.Context, user string, jobNodes openapi.JobNodes) (openapi.ImplResponse, error) {
	zap.S().Debugf("Update/add new nodes for user: %s | designId: %v", user, jobNodes.DesignId)

	//create controller request
	uriMap := map[string]string{
		"user": user,
	}
	url := restapi.CreateURL(HostEndpoint, restapi.JobNodesEndPoint, uriMap)

	//send get request
	_, _, err := restapi.HTTPPut(url, jobNodes, "application/json")

	//response to the user
	if err != nil {
		return openapi.Response(http.StatusInternalServerError, nil), errors.New("update/add nodes for job request failed")
	}
	return openapi.Response(http.StatusOK, nil), err
}
