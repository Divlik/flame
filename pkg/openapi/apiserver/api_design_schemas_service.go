/*
 * Fledge REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"context"
	"fmt"
	"net/http"

	"go.uber.org/zap"

	"wwwin-github.cisco.com/eti/fledge/pkg/openapi"
	"wwwin-github.cisco.com/eti/fledge/pkg/restapi"
	"wwwin-github.cisco.com/eti/fledge/pkg/util"
)

// DesignSchemasApiService is a service that implents the logic for the DesignSchemasApiServicer
// This service should implement the business logic for every endpoint for the DesignSchemasApi API.
// Include any external packages or services that will be required by this service.
type DesignSchemasApiService struct {
}

// NewDesignSchemasApiService creates a default api service
func NewDesignSchemasApiService() openapi.DesignSchemasApiServicer {
	return &DesignSchemasApiService{}
}

// CreateDesignSchema - Update a design schema
func (s *DesignSchemasApiService) CreateDesignSchema(ctx context.Context, user string, designId string,
	designSchema openapi.DesignSchema) (openapi.ImplResponse, error) {
	//TODO input validation
	zap.S().Debugf("Create design schema request received for designId: %v", designId)

	//create controller request
	uriMap := map[string]string{
		"user":     user,
		"designId": designId,
	}
	url := restapi.CreateURL(Host, Port, restapi.CreateDesignSchemaEndPoint, uriMap)

	//send get request
	code, resp, err := restapi.HTTPPost(url, designSchema, "application/json")
	zap.S().Debugf("code: %d, resp: %s", code, string(resp))

	// response to the user
	if err != nil {
		return openapi.Response(http.StatusInternalServerError, nil), fmt.Errorf("error while updating/inserting design schema")
	}

	if err = restapi.CheckStatusCode(code); err != nil {
		return openapi.Response(code, nil), err
	}

	return openapi.Response(http.StatusOK, nil), err
}

// GetDesignSchema - Get a design schema owned by user
func (s *DesignSchemasApiService) GetDesignSchema(ctx context.Context, user string, designId string,
	version string) (openapi.ImplResponse, error) {
	//TODO input validation
	zap.S().Debugf("Get design schema details for user: %s | designId: %s | version: %s", user, designId, version)

	//create controller request
	uriMap := map[string]string{
		"user":     user,
		"designId": designId,
		"version":  version,
	}
	url := restapi.CreateURL(Host, Port, restapi.GetDesignSchemaEndPoint, uriMap)

	//send get request
	code, responseBody, err := restapi.HTTPGet(url)

	// response to the user
	if err != nil {
		return openapi.Response(http.StatusInternalServerError, nil), fmt.Errorf("get design schema details request failed")
	}

	if err = restapi.CheckStatusCode(code); err != nil {
		return openapi.Response(code, nil), err
	}

	resp := openapi.DesignSchema{}
	err = util.ByteToStruct(responseBody, &resp)

	return openapi.Response(http.StatusOK, resp), err
}

// GetDesignSchemas - Get all design schemas in a design
func (s *DesignSchemasApiService) GetDesignSchemas(ctx context.Context, user string, designId string) (openapi.ImplResponse, error) {
	//TODO input validation
	zap.S().Debugf("Get design schema details for user: %s | designId: %s", user, designId)

	//create controller request
	uriMap := map[string]string{
		"user":     user,
		"designId": designId,
	}
	url := restapi.CreateURL(Host, Port, restapi.GetDesignSchemasEndPoint, uriMap)

	//send get request
	code, responseBody, err := restapi.HTTPGet(url)

	// response to the user
	if err != nil {
		return openapi.Response(http.StatusInternalServerError, nil), fmt.Errorf("get design schema details request failed")
	}

	if err = restapi.CheckStatusCode(code); err != nil {
		return openapi.Response(code, nil), err
	}

	var resp []openapi.DesignSchema
	err = util.ByteToStruct(responseBody, &resp)

	return openapi.Response(http.StatusOK, resp), err
}
