// Copyright (c) 2021 Cisco Systems, Inc. and its affiliates
// All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Fledge REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"context"
	"errors"
	"net/http"

	"go.uber.org/zap"
	"wwwin-github.cisco.com/eti/fledge/pkg/openapi"
	"wwwin-github.cisco.com/eti/fledge/pkg/restapi"
)

// AgentApiService is a service that implents the logic for the AgentApiServicer
// This service should implement the business logic for every endpoint for the AgentApi API.
// Include any external packages or services that will be required by this service.
type AgentApiService struct {
}

// NewAgentApiService creates a default api service
func NewAgentApiService() openapi.AgentApiServicer {
	return &AgentApiService{}
}

// UpdateAgentStatus - Update agent status for job id.
func (s *AgentApiService) UpdateAgentStatus(ctx context.Context, user string, jobId string, agentId string,
	agentStatus openapi.AgentStatus) (openapi.ImplResponse, error) {
	//TODO input validation
	zap.S().Debugf("Update agent status agentId: %s | jobId: %s | update type: %s", agentId, jobId, agentStatus.UpdateType)

	//create controller request
	uriMap := map[string]string{
		"user":    user,
		"jobId":   jobId,
		"agentId": agentId,
	}
	url := restapi.CreateURL(Host, Port, restapi.UpdateAgentStatusEndPoint, uriMap)

	//send get request
	_, _, err := restapi.HTTPPut(url, agentStatus, "application/json")

	//response to the user
	if err != nil {
		return openapi.Response(http.StatusInternalServerError, err), errors.New("error while updating the agent status to controller/database")
	}
	return openapi.Response(http.StatusOK, nil), nil
}
