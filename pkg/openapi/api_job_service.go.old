/*
 * Fledge REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A JobApiController binds http requests to an api service and writes the service results to the http response
type JobApiController struct {
	service JobApiServicer
}

// NewJobApiController creates a default api controller
func NewJobApiController(s JobApiServicer) Router {
	return &JobApiController{service: s}
}

// Routes returns all of the api route for the JobApiController
func (c *JobApiController) Routes() Routes {
	return Routes{
		{
			"ChangeJobSchema",
			strings.ToUpper("Post"),
			"/{user}/job/{jobId}/schema/{schemaId}/design/{designId}",
			c.ChangeJobSchema,
		},
		{
			"DeleteJob",
			strings.ToUpper("Delete"),
			"/{user}/job/{jobId}",
			c.DeleteJob,
		},
		{
			"GetJob",
			strings.ToUpper("Get"),
			"/{user}/job/{jobId}",
			c.GetJob,
		},
		{
			"SubmitJob",
			strings.ToUpper("Post"),
			"/{user}/job",
			c.SubmitJob,
		},
		{
			"UpdateJob",
			strings.ToUpper("Put"),
			"/{user}/job/{jobId}",
			c.UpdateJob,
		},
	}
}

// ChangeJobSchema - Change the schema for the given job
func (c *JobApiController) ChangeJobSchema(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	schemaId := params["schemaId"]

	designId := params["designId"]

	result, err := c.service.ChangeJobSchema(r.Context(), user, jobId, schemaId, designId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteJob - Delete job by id.
func (c *JobApiController) DeleteJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	result, err := c.service.DeleteJob(r.Context(), user, jobId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJob - Get job detail.
func (c *JobApiController) GetJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	result, err := c.service.GetJob(r.Context(), user, jobId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SubmitJob - Submit a new job.
func (c *JobApiController) SubmitJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobInfo := &JobInfo{}
	if err := json.NewDecoder(r.Body).Decode(&jobInfo); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.SubmitJob(r.Context(), user, *jobInfo)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateJob - Update job by id.
func (c *JobApiController) UpdateJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	user := params["user"]

	jobId := params["jobId"]

	jobInfo := &JobInfo{}
	if err := json.NewDecoder(r.Body).Decode(&jobInfo); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.UpdateJob(r.Context(), user, jobId, *jobInfo)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
