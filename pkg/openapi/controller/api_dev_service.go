// Copyright (c) 2021 Cisco Systems, Inc. and its affiliates
// All rights reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Job REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package controller

import (
	"context"
	"net/http"

	"go.uber.org/zap"

	"wwwin-github.cisco.com/eti/fledge/pkg/openapi"
)

// DevApiService is a service that implents the logic for the DevApiServicer
// This service should implement the business logic for every endpoint for the DevApi API.
// Include any external packages or services that will be required by this service.
type DevApiService struct {
}

// NewDevApiService creates a default api service
func NewDevApiService() openapi.DevApiServicer {
	return &DevApiService{}
}

var JobNodesInMem = make(map[string]openapi.JobNodes)

// JobNodes - Nodes information for the job
func (s *DevApiService) JobNodes(ctx context.Context, user string, jobNodes openapi.JobNodes) (openapi.ImplResponse, error) {
	zap.S().Infof("Adding nodes for designId : %s", jobNodes.DesignId)
	zap.S().Debugf("Node info: %v", jobNodes.Nodes)
	JobNodesInMem[jobNodes.DesignId] = jobNodes
	return openapi.Response(http.StatusCreated, nil), nil
}

// UpdateJobNodes - Update or add new nodes information for the job
func (s *DevApiService) UpdateJobNodes(ctx context.Context, user string, jobNodes openapi.JobNodes) (openapi.ImplResponse, error) {
	dId := jobNodes.DesignId
	zap.S().Infof("Updating nodes for designId : %s", jobNodes.DesignId)
	zap.S().Infof("Current node information: %v", JobNodesInMem[jobNodes.DesignId])
	zap.S().Debugf("New Node info: %v", jobNodes.Nodes)

	eNodes := JobNodesInMem[dId].Nodes
	//mark existing node flag as true
	for j := range eNodes {
		eNodes[j].IsExistingNode = true
	}

	//loop through all the nodes shared via conf file
	for _, node := range jobNodes.Nodes {
		if node.IsExistingNode {
			//if existing node is required to be updated
			for j, existingNode := range eNodes {
				if existingNode.Uuid == node.Uuid {
					zap.S().Infof("Found an existing node that needs to be updated. old: %v | new: %v", existingNode, node)
					eNodes[j].Command = node.Command
					eNodes[j].IsUpdated = node.IsUpdated
				}
			}
		} else {
			//adding a new node
			eNodes = append(eNodes, node)
		}
	}

	JobNodesInMem[dId] = openapi.JobNodes{
		DesignId: dId,
		Nodes:    eNodes,
	}

	zap.S().Infof("Updated node information: %v", JobNodesInMem[dId])
	return openapi.Response(http.StatusCreated, nil), nil
}
